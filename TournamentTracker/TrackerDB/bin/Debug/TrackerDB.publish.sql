/*
Deployment script for TrackerDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TrackerDB"
:setvar DefaultFilePrefix "TrackerDB"
:setvar DefaultDataPath "C:\Users\Essa\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Essa\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Matchup]...';


GO
CREATE TABLE [dbo].[Matchup] (
    [Id]           INT IDENTITY (1, 1) NOT NULL,
    [WinnerId]     INT NOT NULL,
    [MatchupRound] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[MatchupEntry]...';


GO
CREATE TABLE [dbo].[MatchupEntry] (
    [Id]              INT        IDENTITY (1, 1) NOT NULL,
    [MatchupId]       INT        NOT NULL,
    [ParentMatchupId] INT        NOT NULL,
    [TeamCompetingId] INT        NOT NULL,
    [Score]           FLOAT (53) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Person]...';


GO
CREATE TABLE [dbo].[Person] (
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [FirstName]       NVARCHAR (50)  NOT NULL,
    [LastName]        NVARCHAR (50)  NOT NULL,
    [EmailAddres]     NVARCHAR (200) NOT NULL,
    [CellphoneNumber] NVARCHAR (20)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Prize]...';


GO
CREATE TABLE [dbo].[Prize] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [PlaceNumber]     INT           NOT NULL,
    [PlaceName]       NVARCHAR (50) NOT NULL,
    [PrizeAmount]     MONEY         NOT NULL,
    [PrizePercentage] FLOAT (53)    NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Team]...';


GO
CREATE TABLE [dbo].[Team] (
    [Id]       INT           IDENTITY (1, 1) NOT NULL,
    [TeamName] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TeamMember]...';


GO
CREATE TABLE [dbo].[TeamMember] (
    [Id]       INT IDENTITY (1, 1) NOT NULL,
    [TeamId]   INT NOT NULL,
    [PersonId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Tournament]...';


GO
CREATE TABLE [dbo].[Tournament] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [TournamentName] NVARCHAR (100) NOT NULL,
    [EntryFee]       MONEY          NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TournamentEntry]...';


GO
CREATE TABLE [dbo].[TournamentEntry] (
    [Id]           INT IDENTITY (1, 1) NOT NULL,
    [TournamentId] INT NOT NULL,
    [TeamId]       INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TournamentPrize]...';


GO
CREATE TABLE [dbo].[TournamentPrize] (
    [Id]           INT IDENTITY (1, 1) NOT NULL,
    [PrizeId]      INT NOT NULL,
    [TournamentId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Matchup_Team]...';


GO
ALTER TABLE [dbo].[Matchup]
    ADD CONSTRAINT [FK_Matchup_Team] FOREIGN KEY ([WinnerId]) REFERENCES [dbo].[Team] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MatchupEntry_Matchup]...';


GO
ALTER TABLE [dbo].[MatchupEntry]
    ADD CONSTRAINT [FK_MatchupEntry_Matchup] FOREIGN KEY ([MatchupId]) REFERENCES [dbo].[Matchup] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MatchupEntry_parentMatchup]...';


GO
ALTER TABLE [dbo].[MatchupEntry]
    ADD CONSTRAINT [FK_MatchupEntry_parentMatchup] FOREIGN KEY ([ParentMatchupId]) REFERENCES [dbo].[Matchup] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MatchupEntry_Team]...';


GO
ALTER TABLE [dbo].[MatchupEntry]
    ADD CONSTRAINT [FK_MatchupEntry_Team] FOREIGN KEY ([TeamCompetingId]) REFERENCES [dbo].[Team] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TeamMember_Team]...';


GO
ALTER TABLE [dbo].[TeamMember]
    ADD CONSTRAINT [FK_TeamMember_Team] FOREIGN KEY ([TeamId]) REFERENCES [dbo].[Team] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TeamMember_Person]...';


GO
ALTER TABLE [dbo].[TeamMember]
    ADD CONSTRAINT [FK_TeamMember_Person] FOREIGN KEY ([PersonId]) REFERENCES [dbo].[Person] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TournamentEntry_Tournament]...';


GO
ALTER TABLE [dbo].[TournamentEntry]
    ADD CONSTRAINT [FK_TournamentEntry_Tournament] FOREIGN KEY ([TournamentId]) REFERENCES [dbo].[Tournament] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TournamentEntry_Team]...';


GO
ALTER TABLE [dbo].[TournamentEntry]
    ADD CONSTRAINT [FK_TournamentEntry_Team] FOREIGN KEY ([TeamId]) REFERENCES [dbo].[Team] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TournamentPrize_Prize]...';


GO
ALTER TABLE [dbo].[TournamentPrize]
    ADD CONSTRAINT [FK_TournamentPrize_Prize] FOREIGN KEY ([PrizeId]) REFERENCES [dbo].[Prize] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TournamentPrize_Tournament]...';


GO
ALTER TABLE [dbo].[TournamentPrize]
    ADD CONSTRAINT [FK_TournamentPrize_Tournament] FOREIGN KEY ([TournamentId]) REFERENCES [dbo].[Tournament] ([Id]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '93fecc24-87b0-42ba-b8db-dc93a92b754b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('93fecc24-87b0-42ba-b8db-dc93a92b754b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '046ed9dd-4fd9-4318-ad3e-b2dd046e09e0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('046ed9dd-4fd9-4318-ad3e-b2dd046e09e0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '86867cbd-0480-4d95-8401-5edf3c3e7d4a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('86867cbd-0480-4d95-8401-5edf3c3e7d4a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '024631a3-f122-4713-bbfe-f97755d266f6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('024631a3-f122-4713-bbfe-f97755d266f6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '95572f89-0890-4546-900c-ada0bc48e0b0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('95572f89-0890-4546-900c-ada0bc48e0b0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '143056fe-8954-4c45-bc8b-e4cc7e8c8013')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('143056fe-8954-4c45-bc8b-e4cc7e8c8013')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f7dd42d7-fdd8-43d8-b0d0-3a0864381e3c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f7dd42d7-fdd8-43d8-b0d0-3a0864381e3c')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
